#!/bin/sh

SLUGIFY() {
	echo "$(echo $1 \
		| tr '[:lower:]' '[:upper:]' \
		| tr '[:blank:]' '_' \
		| tr '-' '_')"
}

USAGE() {
	echo "Usage: $(basename $0) <project-name>"
}

PROJECT=$1

[ "${PROJECT:-z}" = "z" ] && USAGE && exit 1

PROJECT_ROOT="$(pwd)/$PROJECT"

echo "Creating project: $PROJECT"

## creating directories
git init "$PROJECT_ROOT"

mkdir "$PROJECT_ROOT/bin" "$PROJECT_ROOT/obj" "$PROJECT_ROOT/src" \
	"$PROJECT_ROOT/include" "$PROJECT_ROOT/tests" "$PROJECT_ROOT/toolchains"

## templating source files
HEADER_NAME="$(SLUGIFY $PROJECT)"
cat >"$PROJECT_ROOT/include/$PROJECT.h" <<EOF
#ifndef ${HEADER_NAME}_H
#define ${HEADER_NAME}_H

/* Standard includes */
#include <assert.h>
#include <errno.h>
#include <limits.h>
#include <stdalign.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <stdnoreturn.h>
#include <string.h>

/* Wide character support */
#include <locale.h>
#include <wchar.h>
#include <wctype.h>

/* Macros */
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#define MAX(a, b) ((a) > (b) ? (a) : (b))
#define ARRLEN(arr) (sizeof(arr) / sizeof(arr[0]))
#define ARRLEN_OVERFLOW(type, capacity) (UINT_MAX / sizeof(type) < (capacity))

/* Integral types */
typedef uint8_t  u8;
typedef uint16_t u16;
typedef uint32_t u32;
typedef uint64_t u64;

typedef int8_t   s8;
typedef int16_t  s16;
typedef int32_t  s32;
typedef int64_t  s64;

typedef float    f32;
typedef double   f64;

/* String types */
struct str_t {
	char *str;
	size_t len;
};

#define STR_FROM_CSTR_SLICE(_cstr, _len) { .str = (_cstr), .len = (_len), }
#define STR_FROM_NULL() STR_FROM_CSTR_SLICE(NULL, 0)
#define STR_FROM_CSTR(_cstr) STR_FROM_CSTR_SLICE(_cstr, strlen(_cstr))
#define STR_FROM_CSTR_LIT(_cstr) STR_FROM_CSTR_SLICE(_cstr, sizeof(_cstr) - sizeof('\0'))

struct wstr_t {
	wchar_t *str;
	size_t len;
};

#define WSTR_FROM_WCSTR_SLICE(_wcstr, l_en) { .str = (_wcstr), .len = (_len), }
#define WSTR_FROM_NULL() WSTR_FROM_WCSTR_SLICE(NULL, 0)
#define WSTR_FROM_WCSTR(_wcstr) WSTR_FROM_WCSTR_SLICE(_wcstr, wcslen(_wcstr))
#define WSTR_FROM_WCSTR_LIT(wcstr) WSTR_FROM_WCSTR_SLICE(_wcstr, sizeof(_wcstr) - sizeof(L'\0'))

#ifndef NDEBUG
	/* prints out the given format string to standard error
	 * ---
	 *  fmt: the format string to print
	 *  ...: the variadic arguments to fprintf
	 */
	#define dbglog(...) fprintf(stderr, __VA_ARGS__)
#else
	/* if NDEBUG is defined, this function will do nothing
	 */
	#define dbglog(...)
#endif

#define errlog(...) fprintf(stderr, __VA_ARGS__)

/* $PROJECT definitions */
int main(int argc, char **argv);

#endif /* ${HEADER_NAME}_H */
EOF

cat >"$PROJECT_ROOT/src/main.c" <<EOF
#include "$PROJECT.h"

int main(int argc, char **argv) {
	(void)argc;
	(void)argv;

	printf("Hello, World!\\n");

	return 0;
}
EOF

cat >"$PROJECT_ROOT/tests/mbs_test.h" <<'EOF'
#ifndef MBS_TEST_H
#define MBS_TEST_H

#include <stdio.h>

#define TEST_BEGIN()								\
	fprintf(stderr, "*************** %s ***************\n", __FILE__);	\
	int __result = 0;

#define TEST_END()								\
	fprintf(stderr, "*************** %s ***************\n", __FILE__);	\
	return __result;

#define PASS() return 1;
#define FAIL() return 0;

#define TEST(test_name, test_body)						\
int test_name(void) {								\
	test_body								\
	PASS()									\
}

#define TEST_RUN(test)								\
{										\
	fprintf(stderr, "%s: ", #test);						\
	if (test()) {								\
		fprintf(stderr, "OK\n");					\
	} else {								\
		fprintf(stderr, "FAILED\n");					\
		__result = 1;							\
	}									\
}

/* Assertions */
#define ASSERT(cond, msg)							\
if (!(cond)) { fprintf(stderr, "%s:%d: ASSERT(%s, \"%s\"): ", __func__, __LINE__, #cond, msg); FAIL(); }

#define ASSERT_NE(cond, msg)							\
if (cond) { fprintf(stderr, "%s:%d: ASSERT_NE(%s, \"%s\"): ", __func__, __LINE__, #cond, msg); FAIL(); }

#endif /* MBS_TEST_H */
EOF

cat >"$PROJECT/tests/test_example.c" << 'EOF'
#include "mbs_test.h"

TEST(test_example, {
	int a = 42;

	ASSERT(a == 42, "a must be equal to 42");
	ASSERT_NE(a == 24, "a cannot be equal to 24");

	// FAIL();

	PASS();
})

// example of including a set of test cases
int main(void) {
	TEST_BEGIN();

	TEST_RUN(test_example);

	TEST_END();
}
EOF

## templating build system script
cat >"$PROJECT_ROOT/common.sh" <<EOF
#!/bin/sh

set -e

TARGET="$PROJECT"

EOF

cat >>"$PROJECT_ROOT/common.sh" <<'EOF'
# project root
PWD="$(dirname $0)"

# project directory structure
BIN="${BIN:-$PWD/bin}"
OBJ="${OBJ:-$PWD/obj}"
SRC="${SRC:-$PWD/src}"
INC="${INC:-$PWD/include}"
TEST="${TEST:-$PWD/tests}"
TOOLCHAINS="${TOOLCHAINS:-$PWD/toolchains}"

# Loads the environment variables defined for the given toolchain target
# Requires:
#   TOOLCHAIN
# Overwrites:
#   __TOOLCHAIN __TGT_TOOLCHAIN __f
# Usage:
#   TOOLCHAIN x86_64-none-linux-gnu
TOOLCHAIN() {
	__TOOLCHAIN="${1:-${TOOLCHAIN:-host}}"
	__TGT_TOOLCHAIN="$TOOLCHAINS/env-$__TOOLCHAIN.sh"

	if [ -f "$__TGT_TOOLCHAIN" ]; then
		. "$__TGT_TOOLCHAIN"
	else
		echo "Unknown toolchain selected: $__TOOLCHAIN"
		echo "Available toolchains:"
		for __f in "$TOOLCHAINS"/env-*.sh; do
			__HOST="$(basename $__f .sh | cut -d'-' -f2)"
			echo "$__HOST ($__f)"
		done
		exit 1
	fi
}

# Returns the correct set of flags based on the compilation regime
# NOTE: requires that the given regime has compilation flag variables in the
#       form ${REGIME}_FLAG_ROOT (where FLAG_ROOT = CFLAGS, LDFLAGS, etc)
# Requires:
#   REGIME
# Overwrites:
#   __REGIME
# Usage:
#   FLAGS="<common-flags> $(REGIME <flag-root>)"
REGIME() {
	eval "echo \$${REGIME:-DEBUG}_$1"
}

# toolchain flags
CFLAGS="$CFLAGS -std=c11 -Wall -Wextra -Wpedantic"
CPPFLAGS="$CPPFLAGS -I$INC"
LDFLAGS="$LDFLAGS -L$BIN"

DEBUG_CFLAGS="-Og -ggdb"
DEBUG_CPPFLAGS=""
DEBUG_LDFLAGS=""

RELEASE_CFLAGS="-O3 -flto"
RELEASE_CPPFLAGS="-DNDEBUG"
RELEASE_LDFLAGS="-flto"

CFLAGS="$CFLAGS $(REGIME CFLAGS)"
CPPFLAGS="$CPPFLAGS $(REGIME CPPFLAGS)"
LDFLAGS="$LDFLAGS $(REGIME LDFLAGS)"

# Logs the given parameters to stderr if the VERBOSE variable is defined
# Overwrites:
#   __ERRNO
# Usage:
#   LOG <message...>
LOG() {
	__ERRNO=$?; [ $VERBOSE ] && printf "%s\n" "$*" >&2; ( exit $__ERRNO )
}

# Executes the given command, echoing it out if the VERBOSE variable is defined
# Overwrites:
#   __ERRNO
# Usage:
#   EXEC <command...>
EXEC() {
	__ERRNO=$?; LOG $@; $@; ( exit $__ERRNO )
}

# Echoes the LDFLAGS for the given library
# Usage:
#   LIB <lib-name> <pkg-config-opts...>
LIB() {
	echo "$(pkg-config --libs $@)"
}

# Echoes the CPPFLAGS for the given library
# Usage:
#   INC <lib-name> <pkg-config-opts...>
INC() {
	echo "$(pkg-config --cflags $@)"
}

# Builds object files from the given sources
# Requires:
#   CC OBJ
# Overwrites:
#   __OBJ_CFLAGS __OBJ_CPPFLAGS
# Usage:
#   OBJECTS "<obj-cflags>" "<obj-cppflags>" <sources...>
OBJECTS() {
	__OBJ_CFLAGS="$1"
	__OBJ_CPPFLAGS="$2"
	shift 2
	for src in $@; do
		EXEC mkdir -p "$(dirname $OBJ/$src)"
		EXEC $CC -o "$OBJ/$src.o" -c "$src" $__OBJ_CFLAGS $__OBJ_CPPFLAGS
		[ $? -eq 0 ] && LOG "Compiled $src -> $OBJ/$src.o"
		echo "$OBJ/$src.o"
	done
}

# Builds an executable from the given sources or objects
# Requires:
#   CC CC_BIN_FLAGS BIN
# Overwrites:
#   __TGT_NAME __TGT_CFLAGS __TGT_CPPFLAGS __TGT_LDFLAGS
# Usage:
#   EXECUTABLE <tgt-name> "<tgt-cflags>" "<tgt-cppflags>" "<tgt-lddflags>" <sources...>
EXECUTABLE() {
	__TGT_NAME=$1
	__TGT_CFLAGS="$2"
	__TGT_CPPFLAGS="$3"
	__TGT_LDFLAGS="$4"
	shift 4
	EXEC $CC -o "$BIN/$__TGT_NAME" $CC_BIN_FLAGS $__TGT_CFLAGS $__TGT_CPPFLAGS $__TGT_LDFLAGS $@
	[ $? -eq 0 ] && LOG "Built executable: $BIN/$__TGT_NAME"
	echo "$BIN/$__TGT_NAME"
}

# Builds a shared library from the given sources or objects
# Requires:
#   CC CC_SO_FLAGS BIN
# Overwrites:
#   __TGT_NAME __TGT_CFLAGS __TGT_CPPFLAGS __TGT_LDFLAGS
# Usage:
#   SHAREDLIB <tgt-name> "<tgt-cflags>" "<tgt-cppflags>" "<tgt-lddflags>" <sources...>
SHAREDLIB() {
	__TGT_NAME=lib$1.so
	__TGT_CFLAGS="$2"
	__TGT_CPPFLAGS="$3"
	__TGT_LDFLAGS="$4"
	shift 4
	EXEC $CC -o "$BIN/$__TGT_NAME" $CC_SO_FLAGS $__TGT_CFLAGS $__TGT_CPPFLAGS $__TGT_LDFLAGS $@
	[ $? -eq 0 ] && LOG "Built shared library: $BIN/$__TGT_NAME"
	echo "$BIN/$__TGT_NAME"
}

# Builds a static library from the given objects
# Requires:
#   AR BIN
# Overwrites:
#   __TGT_NAME
# Usage:
#   STATICLIB <tgt-name> <objects...>
STATICLIB() {
	__TGT_NAME=lib$1.a
	shift 1
	EXEC $AR rcs "$BIN/$__TGT_NAME" $@
	[ $? -eq 0 ] && LOG "Built static library: $BIN/$__TGT_NAME"
	echo "$BIN/$__TGT_NAME"
}

# Runs the given tests
# Requires:
#   CC CC_BIN_FLAGS LIB BIN TEST
# Overwrites:
#   __TEST_CFLAGS __TEST_CPPFLAGS __TEST_LDFLAGS __TEST_TMP
# Usage:
#   TEST "<test-cflags>" "<test-cppflags>" "<test-lddflags>" <tests...>
TEST() {
	__TEST_CFLAGS="$1"
	__TEST_CPPFLAGS="$2"
	__TEST_LDFLAGS="$3"
	shift 3
	__TEST_TMP=0
	for test_src in $@; do
		EXEC mkdir -p "$(dirname $BIN/$test_src.x)"
		EXEC $CC -o "$BIN/$test_src.x" $CC_BIN_FLAGS $__TEST_CFLAGS $__TEST_CPPFLAGS $__TEST_LDFLAGS "$test_src" && \
			LD_LIBRARY_PATH="$BIN:$LD_LIBRARY_PATH" "$BIN/$test_src.x"
		[ $? -ne 0 ] && __TEST_TMP=1
	done
	echo "Ran tests: $([ $__TEST_TMP -eq 0 ] && echo PASS || echo FAIL)"
}
EOF

## templating default toolchain
cat >"$PROJECT_ROOT/toolchains/env-host.sh" <<'EOF'
#!/bin/sh

CFLAGS="$CFLAGS"
CPPFLAGS="$CPPFLAGS"
LDFLAGS="$LDFLAGS"

CC_BIN_FLAGS=""
CC_SO_FLAGS="-shared"

CC="${CC:-cc}"
AR="${AR:-ar}"
AS="${AS:-as}"
LD="${LD:-ld}"
EOF

## templating build scripts
cat >"$PROJECT_ROOT/build" <<'EOF'
#!/bin/sh

. "$(dirname $0)/common.sh"

TOOLCHAIN

LOG "$TARGET CFLAGS: $CFLAGS"
LOG "$TARGET CPPFLAGS: $CPPFLAGS"
LOG "$TARGET LDFLAGS: $LDFLAGS"

SRCS="$SRC/main.c"
LOG "Sources: $SRCS"

# compilation
EXECUTABLE "$TARGET" "$CFLAGS" "$CPPFLAGS" "$LDFLAGS" $SRCS
EOF

cat >"$PROJECT/clean" <<'EOF'
#!/bin/sh

. "$(dirname $0)/common.sh"

rm -fr $OPTS $OBJ/* $BIN/*
EOF

cat >"$PROJECT/dist" <<'EOF'
#!/bin/sh

. "$(dirname $0)/common.sh"

VERSION="${VERSION:-$(git describe --tags 2>/dev/null || echo 0.1.0)}"

tar -czf "$TARGET-$VERSION.tar.gz" "$BIN/$TARGET" "$SRC/" "$INC/"
EOF

cat >"$PROJECT/install" <<'EOF'
#!/bin/sh

. "$(dirname $0)/common.sh"

PREFIX="${PREFIX:-/usr/local}"

cp "$BIN/$TARGET" "$PREFIX/bin/$TARGET"
EOF

cat >"$PROJECT/test" <<'EOF'
#!/bin/sh

. "$(dirname $0)/common.sh"

TOOLCHAIN host

TESTS="$(find "$TEST" -name '*.c' -or -name '*.cpp')"
LOG "Tests: $TESTS"

TEST "$CFLAGS" "$CPPFLAGS" "$LDFLAGS" $TESTS
EOF

cat >"$PROJECT/uninstall" <<'EOF'
#!/bin/sh

. "$(dirname $0)/common.sh"

PREFIX="${PREFIX:-/usr/local}"

rm "$PREFIX/bin/$TARGET"
EOF

## setting execute permissions
chmod +x "$PROJECT_ROOT/build" "$PROJECT_ROOT/clean" "$PROJECT_ROOT/dist" \
	"$PROJECT_ROOT/install" "$PROJECT_ROOT/test" "$PROJECT_ROOT/uninstall"

## templating miscellaneous files
cat >"$PROJECT/Makefile" <<EOF
.PHONY: all build clean dist install test test-mem test-thread uninstall
.SILENT: all build clean dist install test test-mem test-thread uninstall

MEMGRIND := valgrind --tool="memcheck" --leak-check=full --show-leak-kinds=all --track-origins=yes -s
HELGRIND := valgrind --tool="helgrind" -s

all: test
	./bin/$PROJECT

clean:
	./clean

uninstall:
	./uninstall

build: clean
	./build

test: build
	./test

test-mem: build
	\$(MEMGRIND) ./bin/$PROJECT

test-thread: build
	\$(HELGRIND) ./bin/$PROJECT

dist: test
	./dist

install: test
	./install
EOF

cat >"$PROJECT/.gitignore" <<'EOF'
bin/
obj/

**/.*.swp
EOF

cat >"$PROJECT/.editorconfig" <<'EOF'
root = true

[*]
end_of_line = lf
insert_final_newline = true
charset = utf-8

[*.{c,cpp,h,hpp,tpp}]
indent_style = tab
indent_size = 8

[*.{sh,conf}]
indent_style = tab
indent_size = 8

[*.{css,html,js,jsx,ts,tsx}]
indent_style = space
indent_size = 2

[*.{json,md}]
indent_style = space
indent_size = 2
EOF

cat >"$PROJECT/README.md" <<EOF
# $PROJECT

EOF
