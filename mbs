#!/bin/sh

set -e

REPONAME() {
	echo $1 | tr '[:blank:]' '-'
}

SLUGIFY() {
	echo $1 | tr '[:punct:]' '_'
}

UPPERCASE() {
	echo $1 | tr '[:lower:]' '[:upper:]'
}

ELOG() {
	printf "%s\n" "$*" >&2
}

USAGE() {
	ELOG "Usage: $(basename $0) <project-name>"
	ELOG "  Creates a new monorepo-style project with the given name"
}

[ "${1:-z}" = "z" ] && ( USAGE; exit 1 )

ROOT="$(pwd)"
NAME="$(REPONAME $1)"
SLUG="$(SLUGIFY $(UPPERCASE $NAME))"

if [ -d "$ROOT/$NAME" ]; then
	ELOG "Target folder $ROOT/$NAME already exists!";
	exit 1
fi

## template in repo and project layout

git init "$ROOT/$NAME"
cd "$ROOT/$NAME"

DIRS="
	$NAME $NAME/src $NAME/include $NAME/tests
	docs docs/$NAME
"

mkdir $DIRS

## template in non-code files
cat >.editorconfig <<'EOF'
root = true

[*]
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true

# visual studio editorconfig plugin specific settings
guidelines = 80, 120, 160

[*.{c,cpp,h,hpp,tpp}]
indent_style = tab
indent_size = 8

[*.{sh}]
indent_style = tab
indent_size = 8

[*.{css,html,js,jsx,ts,tsx}]
indent_style = space
indent_size = 2

[*.{conf,json,md,txt}]
indent_style = space
indent_size = 2
EOF

cat >.gitignore <<'EOF'
bin/
lib/
obj/

**/.*.swp
EOF

cat >README.txt <<EOF
$NAME
==============================================================================
EOF

cat >docs/README.txt <<EOF
$NAME
==============================================================================
EOF

cat >docs/$NAME/README.txt <<EOF
$NAME
==============================================================================
EOF

touch LICENSE.txt

## initialise libmbs submodule
git submodule add https://github.com/mblenczewski/libmbs

## template in selected project

cat >$NAME/include/$NAME.h <<EOF
#ifndef ${SLUG}_H
#define ${SLUG}_H

#include "libmbs.h"

#endif /* ${SLUG}_H */
EOF

cat >$NAME/src/$NAME.c <<EOF
#include "$NAME.h"

s32
main(s32 argc, char **argv) {
	(void)argc;
	(void)argv;

	dbglog("Version: " ${SLUG}_VERSION);
	printf("Hello, World!\n");

	return 0;
}
EOF

cat >$NAME/tests/test_$NAME.c <<EOF
#include "libmbs/test.h"
#include "$NAME.h"

s32
test_example(void) {
	int a = 42;

	TEST_EXPECT(a + 2 == 44, "a + 2 != 44")
	TEST_ASSERT(a == 42, "a != 42")

	TEST_PASS()
}

s32
main(s32 argc, char **argv) {
	(void)argc;
	(void)argv;

	TESTS_BEGIN()

	TEST_RUN(test_example)

	TESTS_END()
}
EOF

cat >$NAME/makefile.mk <<EOF
.PHONY: $NAME $NAME-build $NAME-test

${SLUG}_MAJOR		:= 0
${SLUG}_MINOR		:= 1
${SLUG}_PATCH		:= 0
${SLUG}_VERSION		:= \$(${SLUG}_MAJOR).\$(${SLUG}_MINOR).\$(${SLUG}_PATCH)

${SLUG}_CFLAGS		:= \\
			   \$(CFLAGS) \\
			   \$(CPPFLAGS) \\
			   -D${SLUG}_VERSION_MAJOR="\"\$(${SLUG}_MAJOR)"\" \\
			   -D${SLUG}_VERSION_MINOR="\"\$(${SLUG}_MINOR)"\" \\
			   -D${SLUG}_VERSION_PATCH="\"\$(${SLUG}_PATCH)"\" \\
			   -D${SLUG}_VERSION="\"\$(${SLUG}_VERSION)"\" \\
			   -I$NAME/include -Ilibmbs/include

${SLUG}_FLAGS		:= \\
			   \$(${SLUG}_CFLAGS) \\
			   \$(LDFLAGS) -lmbs

${SLUG}_SOURCES		:= $NAME/src/$NAME.c

${SLUG}_OBJECTS		:= \$(${SLUG}_SOURCES:%.c=\$(OBJ)/%.c.o)
${SLUG}_OBJDEPS		:= \$(${SLUG}_OBJECTS:%.o=%.d)

-include \$(${SLUG}_OBJDEPS)

${SLUG}_TEST_SOURCES	:= $NAME/tests/test_$NAME.c

${SLUG}_TEST_OBJECTS	:= \$(${SLUG}_TEST_SOURCES:%.c=\$(TST)/%.x)

\$(${SLUG}_OBJECTS): \$(OBJ)/%.c.o: %.c | \$(OBJ)
	@mkdir -p \$(dir \$@)
	\$(CC) -MMD -o \$@ -c \$< \$(${SLUG}_CFLAGS)

\$(${SLUG}_TEST_OBJECTS): \$(TST)/%.x: $NAME-test-deps %.c \$(${SLUG}_OBJECTS) | \$(TST)
	@mkdir -p \$(dir \$@)
	\$(CC) -static -o \$@ \$(wordlist 2,\$(words \$^),\$^) \$(${SLUG}_FLAGS)

\$(BIN)/$NAME: $NAME-deps \$(${SLUG}_OBJECTS) | \$(BIN)
	@mkdir -p \$(dir \$@)
	\$(CC) -o \$@ \$(wordlist 2,\$(words \$^),\$^) \$(${SLUG}_FLAGS)

#\$(LIB)/lib$NAME.\$(${SLUG}_VERSION).a: $NAME-deps \$(${SLUG}_OBJECTS) | \$(LIB)
#	@mkdir -p \$(dir \$@)
#	\$(AR) -rcs \$@ \$(wordlist 2,\$(words \$^),\$^)
#
#\$(LIB)/lib$NAME.\$(${SLUG}_MAJOR).a: \$(LIB)/lib$NAME.\$(${SLUG}_VERSION).a
#	ln -sf \$(notdir \$<) \$@
#
#\$(LIB)/lib$NAME.a: \$(LIB)/lib$NAME.\$(${SLUG}_MAJOR).a
#	ln -sf \$(notdir \$<) \$@
#
#\$(LIB)/lib$NAME.\$(${SLUG}_VERSION).so: $NAME-deps \$(${SLUG}_OBJECTS) | \$(LIB)
#	@mkdir -p \$(dir \$@)
#	\$(CC) -shared -o \$@ \$(wordlist 2,\$(words \$^),\$^) \$(${SLUG}_FLAGS)
#
#\$(LIB)/lib$NAME.\$(${SLUG}_MAJOR).so: \$(LIB)/lib$NAME.\$(${SLUG}_VERSION).so
#	ln -sf \$(notdir \$<) \$@
#
#\$(LIB)/lib$NAME.so: \$(LIB)/lib$NAME.\$(${SLUG}_MAJOR).so
#	ln -sf \$(notdir \$<) \$@

$NAME-deps: \$(LIB)/libmbs.a

$NAME-build: \$(BIN)/$NAME

$NAME-test-deps: \$(LIB)/libmbs.a

$NAME-test: \$(${SLUG}_TEST_OBJECTS)
	@for f in \$(${SLUG}_TEST_OBJECTS); do ./\$\$f ; done

$NAME: $NAME-build $NAME-test
EOF

cat >config.mk <<'EOF'
## toolchain
CC		?= cc
CXX		?= c++
AR		?= ar
RANLIB		?= ranlib

STRIP		?= strip

TAR		?= tar
ZIP		?= gzip

## project build directories
BIN		:= bin
OBJ		:= obj
LIB		:= lib
TST		:= $(BIN)/tests

$(BIN):
	@mkdir -p $(BIN)

$(OBJ):
	@mkdir -p $(OBJ)

$(LIB):
	@mkdir -p $(LIB)

$(TST): $(BIN)
	@mkdir -p $(TST)

## append project-wide toolchain flags
CFLAGS		:= $(CFLAGS) -std=c11 -Wall -Wextra -Wpedantic -Werror
CPPFLAGS	:= $(CPPFLAGS) -D_XOPEN_SOURCE=700
LDFLAGS		:= $(LDFLAGS) -L$(LIB)

REGIME		?= DEBUG

DEBUG_CFLAGS	:= $(DEBUG_CFLAGS) -Og -ggdb
DEBUG_CPPFLAGS	:= $(DEBUG_CPPFLAGS) -UNDEBUG
DEBUG_LDFLAGS	:= $(DEBUG_LDFLAGS)

RELEASE_CFLAGS	:= $(RELEASE_CFLAGS) -O3 -flto
RELEASE_CPPFLAGS:= $(RELEASE_CPPFLAGS) -DNDEBUG
RELEASE_LDFLAGS	:= $(RELEASE_LDFLAGS) -flto

## append regime-specific toolchain flags
CFLAGS		:= $(CFLAGS) $($(REGIME)_CFLAGS)
CPPFLAGS	:= $(CPPFLAGS) $($(REGIME)_CPPFLAGS)
LDFLAGS		:= $(LDFLAGS) $($(REGIME)_LDFLAGS)
EOF

cat >Makefile <<EOF
.PHONY: all build clean test

all: build test

include config.mk

clean:
	rm -fr \$(BIN) \$(LIB) \$(OBJ)

build: $NAME-build

test: $NAME-test

include libmbs/makefile.mk
include $NAME/makefile.mk
EOF

cd "$ROOT"
